{"remainingRequest":"/Users/taufiqurrahman/Development/belajarkoding/workaholic/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/taufiqurrahman/Development/belajarkoding/workaholic/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/taufiqurrahman/Development/belajarkoding/workaholic/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/taufiqurrahman/Development/belajarkoding/workaholic/src/components/BanerProduct.vue?vue&type=template&id=5c450303&scoped=true&","dependencies":[{"path":"/Users/taufiqurrahman/Development/belajarkoding/workaholic/src/components/BanerProduct.vue","mtime":1587514214678},{"path":"/Users/taufiqurrahman/Development/belajarkoding/workaholic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taufiqurrahman/Development/belajarkoding/workaholic/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/taufiqurrahman/Development/belajarkoding/workaholic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taufiqurrahman/Development/belajarkoding/workaholic/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}